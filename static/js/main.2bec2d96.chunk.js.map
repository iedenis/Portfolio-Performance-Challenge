{"version":3,"sources":["components/styledComponents.js","components/UserInput.js","components/ResultTable.js","components/TryThis.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["StyledContainer","styled","Container","StyledH2","h2","FontAwesomeIconStyled","FontAwesomeIcon","props","icon","iconName","UserInput","handleUserInput","value","message","stocksValues","useState","showAlert","setShowAlert","stockPercentage","stocks","setStocks","date","amount","input","setInput","useEffect","console","log","setTimeout","onChangeHandler","index","event","myStocks","target","name","printResult","dataToPrint","submit","e","preventDefault","sum","reduce","acc","stock","parseInt","data","handleInput","Fragment","Form","onSubmit","htmlFor","Control","type","placeholder","onChange","Row","Col","map","idx","style","display","key","xs","marginTop","marginBottom","onClick","values","find","o","push","width","faPlusCircle","Alert","variant","ResultTable","curr","newAmount","oldAmount","Table","striped","bordered","hover","size","stockName","TryThis","padding","textAlign","Chart","profit","item","colors","labels","datasets","label","backgroundColor","Math","floor","random","length","options","title","text","fontSize","legend","position","App","error","setError","setStocksValues","yesterday","Date","setDate","getDay","getHours","getDate","toISOString","slice","callback","a","fetchedData","fetchDataPromise","Promise","all","then","res","catch","err","percentage","promise","resolve","reject","url","fetch","json","dayValue","yesterdayValue","Message","stockPrice","todayPrice","ratio","round","maxHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"siBAIO,IAAMA,EAAkBC,YAAOC,IAAPD,CAAH,K,2bCG5B,IAAME,EAAWF,IAAOG,GAAV,KAKRC,EAAwBJ,YAAOK,IAAPL,CAAH,KAClB,SAAAM,GAAK,MAA4B,gBAAxBA,EAAMC,KAAKC,SAA6B,QAAU,SAKvDC,EAAY,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,gBAAiBC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,QAA4B,KAAnBC,aACvBC,mBAAS,CAAEH,MAAOA,EAAOC,QAASA,KADQ,mBACrEG,EADqE,KAC1DC,EAD0D,OAEhDF,mBAAS,CAAC,CAAEH,MAAO,KAAMM,gBAAiB,KAFM,mBAErEC,EAFqE,KAE7DC,EAF6D,OAIlDL,mBAAS,CAC/BM,KAAM,GACNC,OAAQ,IANgE,mBAIrEC,EAJqE,KAI9DC,EAJ8D,KAS5EC,qBAAU,WACNC,QAAQC,IAAIX,EAAUJ,OACtBgB,YAAW,WAEPX,EAAa,CAAEL,OAAO,EAAOC,QAAS,OACvC,OAEJ,CAACG,EAAUJ,QAGda,qBAAU,WACNR,EAAa,CAAEL,MAAOA,EAAOC,QAASA,MACvC,CAACD,EAAOC,IAEX,IAAMgB,EAAkB,SAACC,EAAOC,GAC5B,IAAMC,EAAQ,YAAOb,GAErBa,EAASF,GAAOC,EAAME,OAAOC,MAAQH,EAAME,OAAOrB,MAClDQ,EAAUY,IAiBRG,EAAc,SAACC,GACjBV,QAAQC,IAAIS,IAEVC,EAAS,SAACC,GACZA,EAAEC,iBACF,IAAMC,EAAMrB,EAAOsB,QAAO,SAACC,EAAKC,GAC5B,OAAOD,EAAME,SAASD,EAAMzB,mBAC7B,GACH,GAAwB,OAApBC,EAAO,GAAGP,MACV,GAAmB,KAAfW,EAAMF,KACNJ,EAAa,CAAEL,OAAO,EAAMC,QAAS,6BAGpC,CACD,IAAMgC,EAAO,CACT1B,OAAQA,EACRE,KAAME,EAAMF,KACZC,OAAQC,EAAMD,QAEdkB,EAAM,IACNvB,EAAa,CAAEL,OAAO,EAAMC,QAAS,2BAE/BD,GAAOD,EAAgBkC,EAAMV,QAM3ClB,EAAa,CAAEL,OAAO,EAAMC,QAAS,iBAIvCiC,EAAc,SAACR,GACjBd,E,yVAAS,CAAD,GAAMD,EAAN,eAAce,EAAEL,OAAOC,KAAOI,EAAEL,OAAOrB,UAGnD,OACI,kBAAC,IAAMmC,SAAP,KACI,kBAAC/C,EAAD,KACI,kBAACgD,EAAA,EAAD,CAAMC,SAAUZ,GACZ,kBAAClC,EAAD,wCACA,2BAAO+C,QAAQ,QAAf,4BACA,kBAACF,EAAA,EAAKG,QAAN,CAAcjB,KAAK,OAAOkB,KAAK,OAAOC,YAAY,OAAOC,SAAUR,IACnE,6BACA,uDACA,kBAACE,EAAA,EAAKG,QAAN,CAAcjB,KAAK,SAASkB,KAAK,SAASC,YAAY,SAASC,SAAUR,IACzE,6BACA,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,sDAEL,kBAACA,EAAA,EAAD,mBAGJ,kBAACD,EAAA,EAAD,KACKpC,EAAOsC,KAAI,SAACd,EAAOe,GAChB,OACI,yBACIC,MAAO,CAAEC,QAAS,QAClBC,IAAG,UAAKlB,EAAL,YAAce,IACjB,kBAACF,EAAA,EAAD,CAAKM,GAAI,GACL,kBAACd,EAAA,EAAKG,QAAN,CACIQ,MAAO,CAAEI,UAAW,OAAQC,aAAc,QAC1CH,IAAG,UAAKlB,EAAL,YAAce,GACjBxB,KAAK,QACLkB,KAAK,OACLC,YAAY,QACZzC,MAAO+B,EAAM/B,OAAS,GACtB0C,SAAU,SAAAhB,GAAC,OAAIT,EAAgB6B,EAAKpB,OAG5C,kBAACkB,EAAA,EAAD,CAAKK,IAAG,UAAKlB,EAAL,YAAce,IAClB,kBAACV,EAAA,EAAKG,QAAN,CAAcQ,MAAO,CAAEI,UAAW,OAAQC,aAAc,QAAUH,IAAG,UAAKlB,EAAL,YAAce,GAC/ExB,KAAK,kBACLkB,KAAK,SACLC,YAAY,UAEZC,SAAU,SAAAhB,GAAC,OAAIT,EAAgB6B,EAAKpB,YAQ5D,4BACI2B,QAnGH,SAAC3B,GACdA,EAAEC,iBACF,IAAM2B,EAAM,YAAO/C,GACd+C,EAAOC,MAAK,SAAAC,GAAC,OAAgB,OAAZA,EAAExD,SAKpBK,EAAa,CAAEL,OAAO,EAAMC,QAAS,yBAJrCqD,EAAOG,KAAK,CAAEzD,MAAO,OACrBQ,EAAU8C,KA8FqBP,MAAO,CAAEW,MAAO,QACnC,kBAACjE,EAAD,CACIG,KAAM+D,OACd,4BAAQtB,SAAU,SAACX,GAAD,OAAOD,EAAOC,IAC5BqB,MAAO,CAAEW,MAAO,QADpB,WAIHtD,EAAUJ,MAAQ,kBAAC4D,EAAA,EAAD,CAAOb,MAAO,CAAEI,UAAW,QAAUU,QAAQ,UAAUzD,EAAUH,SAAmB,M,SCtJ1G6D,EAAc,SAAC,GAAsB,IAApB5D,EAAmB,EAAnBA,aACpB0B,EAAM1B,EAAa2B,QAAO,SAACC,EAAKiC,GAClC,OAAOjC,GAAOiC,EAAKC,UAAYD,EAAKE,aACrC,GACH,OAEI,kBAAC7E,EAAD,KACI,4CACA,kBAAC8E,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MAC/B,+BACI,4BACI,6BACA,0CACA,wCACA,wCACA,wCAIR,+BAEKpE,EAAa2C,KAAI,SAACd,EAAOe,GACtB,OAAQ,wBAAIG,IAAG,UAAKlB,EAAL,YAAce,IACzB,4BAAKA,EAAM,GACX,4BAAKf,EAAMwC,WACX,gCAAMxC,EAAMkC,WACZ,gCAAMlC,EAAMiC,WACZ,gCAAMjC,EAAMiC,UAAYjC,EAAMkC,eAKtC,4BACI,6BACA,6BACA,6BACA,6BACA,4BAAI,yDAA+BrC,SCpC9C4C,EAAU,WACnB,OACI,kBAACpF,EAAD,CAAiB2D,MAAO,CAAE0B,QAAS,QAC/B,wBAAI1B,MAAO,CAAE2B,UAAW,WAAxB,oBAEA,kBAACR,EAAA,EAAD,CAAOI,KAAK,MACR,+BACI,4BACI,0CACA,0CACA,0CACA,4CAGR,+BACI,4BACI,oCACA,oCACA,mCACA,qCAEJ,4BACI,oCACA,mCACA,oCACA,yC,QCmBTK,EA9CD,SAAC,GAAsB,IAApBzE,EAAmB,EAAnBA,aAET0E,EAAS1E,EAAa2C,KAAI,SAAAgC,GAAU,OAAOA,EAAKb,UAAYa,EAAKZ,aAC/Da,EAAS,CACX,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,2BAGE7C,EAAO,CACT8C,OAAQ7E,EAAa2C,KAAI,SAAAvB,GAAI,OAAIA,EAAKiD,aACtCS,SAAU,CACN,CACIC,MAAO,kBACPhD,KAAM2C,EACNM,gBAAiBhF,EAAa2C,KAAI,SAAAd,GAAK,OAAI+C,EAAOK,KAAKC,MAAMD,KAAKE,SAAWP,EAAOQ,eAKhG,OACI,kBAAClG,EAAD,KACI,kBAAC,IAAD,CACI6C,KAAMA,EAENsD,QAAS,CACLC,MAAO,CACHxC,SAAS,EACTyC,KAAM,gBACNC,SAAU,IAGdC,OAAQ,CACJ3C,SAAS,EACT4C,SAAU,cC4DnBC,MA7Ff,WAAgB,IAAD,EAEa1F,mBAAS,CAAEH,OAAO,EAAOC,QAAS,KAF/C,mBAEN6F,EAFM,KAECC,EAFD,OAG2B5F,mBAAS,IAHpC,mBAGND,EAHM,KAGQ8F,EAHR,KAUPC,EAAY,IAAIC,MAAK,IAAIA,MAAOC,QAJL,KAAxB,IAAID,MAAOE,UAAiB,IAAIF,MAAOG,WAAa,IAAK,IAAIH,MAAOI,WAAY,IAAIJ,MAAOI,UAAY,GACzG,IAAIJ,MAAOI,UAAY,IAG2BC,cAAcC,MAAM,EAAG,IAEhF3F,qBAAU,WACRC,QAAQC,IAAIb,KACX,CAACA,IAEJ,IAAMH,EAAe,uCAAG,WAAOkC,EAAMwE,GAAb,mBAAAC,EAAA,6DAElBC,EAAc,GACZpG,EAAS0B,EAAK1B,OACdG,EAASuB,EAAKvB,OACpBH,EAAOsC,KAAI,SAACd,EAAOe,GACjB,IAAImB,EAAYvD,GAAUqB,EAAMzB,gBAAkB,KAClD,OAAOqG,EAAYlD,KAAKmD,EAAiB7E,EAAM/B,MAAOiC,EAAKxB,KAAMsB,EAAMzB,gBAAiB2D,OAPpE,SAShB4C,QAAQC,IAAIH,GAAaI,MAAK,SAAAC,GAAG,OAAIhB,EAAgBgB,MAAMC,OAAM,SAAAC,GACrEnB,EAAS,CAAE/F,OAAO,EAAMC,QAASiH,OAVb,2CAAH,wDAcfN,EAAgB,uCAAG,WAAOrC,EAAW9D,EAAM0G,EAAYlD,GAApC,eAAAyC,EAAA,6DACjBU,EAAU,IAAIP,QAAJ,uCAAY,WAAOQ,EAASC,GAAhB,2BAAAZ,EAAA,6DACpBa,EADoB,kFAC6DhD,EAD7D,iBAC+E9D,EAD/E,6FAIP+G,MAAMD,GACpBR,MAAK,SAAA9E,GAAI,OAAIA,EAAKwF,UAClBR,OAAM,SAAAC,GAAG,OAAInB,EAAS,CACrB/F,OAAO,EACPC,QAASiH,OARW,cAIxBQ,EAJwB,gBAWDF,MAAM,2EAAD,OAA4EjD,EAA5E,iBAA8F0B,EAA9F,4EAAkLc,MAAK,SAAA9E,GAAI,OAAIA,EAAKwF,UAXxM,OAWxBE,EAXwB,yDAcxB5B,EAAS,CAAE/F,OAAO,EAAMC,QAAQ,EAAD,KAC/BqH,EAAO,QAAD,MAfkB,QAkBtBI,EAASE,SAAWD,EAAeC,SACrC7B,EAAS,CACP/F,OAAO,EACPC,QAASyH,EAASE,QAAUF,EAASE,QAAU3B,EAAU2B,UAE3DN,EAAO,uBAGDO,EAAaH,EAASzF,KAAKsC,GAAd,MACbuD,EAAaH,EAAe1F,KAAKsC,GAApB,KACbwD,EAAQ5C,KAAK6C,MAAOF,EAAaD,EAAc,KAAO,IACtD7D,EAAYhC,SAASiC,EAAY8D,GAEvCV,EADY,CAAE9C,UAAWA,EAAWN,UAAWA,EAAWD,UAAWA,KA9B7C,0DAAZ,yDADO,kBAmChBoD,GAnCgB,2CAAH,4DA6CtB,OACE,kBAAC,IAAMjF,SAAP,KACE,kBAAC7C,EAAA,EAAD,CAAWyD,MAAO,CAAEkF,UAAW,UAC5B/H,EAAaoF,OAAS,EAAI,mBAVjB,WACd,OAAO,kBAAC,IAAMnD,SAAP,KACL,kBAAC,EAAD,CAAajC,aAAcA,IAC3B,kBAAC,EAAD,CAAOA,aAAcA,OAOQ,MACzB,kBAAC,IAAMiC,SAAP,KACE,kBAAC,EAAD,CAAWpC,gBAAiBA,EAAiBG,aAAcA,EAAcF,MAAO8F,EAAM9F,MAAOC,QAAS6F,EAAM7F,UAC5G,kBAAC,EAAD,UC7EQiI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.2bec2d96.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { Container } from 'react-bootstrap';\n\n\nexport const StyledContainer = styled(Container)`\nmargin-top: 20px;\nborder: 2px solid;\nborder-color: #DCE1E5;\npadding: 5px 30px 30px 30px;\nborder-radius: 5px;\nmax-width: 500px;\n`\n","import React, { useState, useEffect } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Alert, Row, Col } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { StyledContainer } from './styledComponents'\nconst StyledH2 = styled.h2`\ntext-align:center;\npadding-bottom: 10px;\n`\n\nconst FontAwesomeIconStyled = styled(FontAwesomeIcon)`\ncolor: ${props => props.icon.iconName === 'plus-circle' ? 'green' : 'red'};\n:hover{color: 'red'};\n`\n\n\nexport const UserInput = ({ handleUserInput, value, message, stocksValues }) => {\n    const [showAlert, setShowAlert] = useState({ value: value, message: message });\n    const [stocks, setStocks] = useState([{ value: null, stockPercentage: 0 }])\n\n    const [input, setInput] = useState({\n        date: '',\n        amount: 0\n    })\n\n    useEffect(() => {\n        console.log(showAlert.value)\n        setTimeout(() => {\n            //console.log(showAlert.value)\n            setShowAlert({ value: false, message: '' });\n        }, 5000);\n\n    }, [showAlert.value])\n\n\n    useEffect(() => {\n        setShowAlert({ value: value, message: message })\n    }, [value, message])\n\n    const onChangeHandler = (index, event) => {\n        const myStocks = [...stocks]\n        /*console.log(myStocks[index][event.target.name])*/\n        myStocks[index][event.target.name] = event.target.value;\n        setStocks(myStocks);\n    }\n\n    const addField = (e) => {\n        e.preventDefault();\n        const values = [...stocks];\n        if (!values.find(o => o.value === null)) {\n            values.push({ value: null })\n            setStocks(values)\n        }\n        else {\n            setShowAlert({ value: true, message: 'Insert a stock name' });\n        }\n\n    }\n\n\n    const printResult = (dataToPrint) => {\n        console.log(dataToPrint)\n    }\n    const submit = (e) => {\n        e.preventDefault();\n        const sum = stocks.reduce((acc, stock) => {\n            return acc + parseInt(stock.stockPercentage)\n        }, 0)\n        if (stocks[0].value !== null) {\n            if (input.date === '') {\n                setShowAlert({ value: true, message: 'Please select a date' });\n\n            }\n            else {\n                const data = {\n                    stocks: stocks,\n                    date: input.date,\n                    amount: input.amount\n                }\n                if (sum < 100) {\n                    setShowAlert({ value: true, message: \"The sum has to be 100%\" })\n                }\n                else if (!value) handleUserInput(data, printResult)\n\n            }\n        }\n\n        else {\n            setShowAlert({ value: true, message: 'Insert data' })\n        }\n\n    }\n    const handleInput = (e) => {\n        setInput({ ...input, [e.target.name]: e.target.value })\n    }\n\n    return (\n        <React.Fragment>\n            <StyledContainer>\n                <Form onSubmit={submit}>\n                    <StyledH2>Portfolio Performance Challenge</StyledH2>\n                    <label htmlFor='date'>Select the starting date</label>\n                    <Form.Control name='date' type=\"date\" placeholder=\"date\" onChange={handleInput} />\n                    <br />\n                    <label>Initial balance in $</label>\n                    <Form.Control name='amount' type=\"number\" placeholder=\"Amount\" onChange={handleInput} />\n                    <br />\n                    <Row>\n                        <Col><label>Insert your stocks</label></Col>\n\n                        <Col>Part in %</Col>\n                    </Row>\n\n                    <Row>\n                        {stocks.map((stock, idx) => {\n                            return (\n                                <div\n                                    style={{ display: 'flex' }}\n                                    key={`${stock}-${idx}`} >\n                                    <Col xs={6} >\n                                        <Form.Control\n                                            style={{ marginTop: '.5em', marginBottom: '.5em' }}\n                                            key={`${stock}-${idx}`}\n                                            name='value'\n                                            type=\"text\"\n                                            placeholder=\"STOCK\"\n                                            value={stock.value || \"\"}\n                                            onChange={e => onChangeHandler(idx, e)}\n                                        />\n                                    </Col>\n                                    <Col key={`${stock}+${idx}`}>\n                                        <Form.Control style={{ marginTop: '.5em', marginBottom: '.5em' }} key={`${stock}-${idx}`}\n                                            name='stockPercentage'\n                                            type=\"number\"\n                                            placeholder=\"PERCENT\"\n                                            /*value={stock.value || \"\"}*/\n                                            onChange={e => onChangeHandler(idx, e)}\n                                        />\n                                    </Col>\n                                </div>\n                            );\n                        })}\n\n                    </Row>\n                    <button\n                        onClick={addField} style={{ width: '50%' }}>\n                        <FontAwesomeIconStyled\n                            icon={faPlusCircle}></FontAwesomeIconStyled></button>\n                    <button onSubmit={(e) => submit(e)}\n                        style={{ width: '50%' }}>\n                        Submit</button>\n                </Form>\n                {showAlert.value ? <Alert style={{ marginTop: '.5em' }} variant=\"danger\">{showAlert.message}</Alert> : ''}\n            </StyledContainer>\n        </React.Fragment >\n\n    )\n}\n","import React from 'react'\nimport { StyledContainer } from './styledComponents';\nimport { Table } from 'react-bootstrap';\n\nexport const ResultTable = ({ stocksValues }) => {\n    const sum = stocksValues.reduce((acc, curr) => {\n        return acc + (curr.newAmount - curr.oldAmount)\n    }, 0)\n    return (\n\n        <StyledContainer >\n            <h2>Your Revenue</h2>\n            <Table striped bordered hover size='sm'>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Stock Name</th>\n                        <th>Invested</th>\n                        <th>Returned</th>\n                        <th>Profit</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n\n                    {stocksValues.map((stock, idx) => {\n                        return (<tr key={`${stock}-${idx}`}>\n                            <td>{idx + 1}</td>\n                            <td>{stock.stockName}</td>\n                            <td>${stock.oldAmount}</td>\n                            <td>${stock.newAmount}</td>\n                            <td>${stock.newAmount - stock.oldAmount}</td>\n                        </tr>\n                        )\n\n                    })}\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td><strong>Your total profit is ${sum}</strong></td>\n                    </tr>\n\n                </tbody>\n            </Table>\n        </StyledContainer>\n    )\n}\n","import React from 'react'\nimport { Table } from 'react-bootstrap'\nimport { StyledContainer } from './styledComponents';\nimport '../App.css'\n\nexport const TryThis = () => {\n    return (\n        <StyledContainer style={{ padding: '3px' }}>\n            <h3 style={{ textAlign: 'center' }}>Try these stocks</h3>\n\n            <Table size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>Stock Name</th>\n                        <th>Stock Name</th>\n                        <th>Stock Name</th>\n                        <th>Stock Name</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>SNAP</td>\n                        <td>AAPL</td>\n                        <td>AMD</td>\n                        <td>NVDA</td>\n                    </tr>\n                    <tr>\n                        <td>MSFT</td>\n                        <td>UNH</td>\n                        <td>AMZN</td>\n                        <td>GOOG</td>\n                    </tr>\n                </tbody>\n            </Table>\n        </StyledContainer>\n\n    )\n}\n","import React from 'react'\nimport { Bar } from 'react-chartjs-2'\nimport { StyledContainer } from './styledComponents'\nconst Chart = ({ stocksValues }) => {\n\n    let profit = stocksValues.map(item => { return item.newAmount - item.oldAmount })\n    const colors = [\n        'rgba(255, 99, 132, 0.6)',\n        'rgba(54, 162, 235, 0.6)',\n        'rgba(255, 206, 86, 0.6)',\n        'rgba(75, 192, 192, 0.6)',\n        'rgba(153, 102, 255, 0.6)',\n        'rgba(255, 159, 64, 0.6)',\n        'rgba(255, 99, 132, 0.6)'\n    ]\n\n    const data = {\n        labels: stocksValues.map(name => name.stockName),\n        datasets: [\n            {\n                label: 'Change in value',\n                data: profit,\n                backgroundColor: stocksValues.map(stock => colors[Math.floor(Math.random() * colors.length)])\n            }\n        ]\n    }\n\n    return (\n        <StyledContainer>\n            <Bar\n                data={data}\n\n                options={{\n                    title: {\n                        display: true,\n                        text: 'Stocks change',\n                        fontSize: 25\n\n                    },\n                    legend: {\n                        display: true,\n                        position: \"right\"\n                    }\n                }}\n            ></Bar>\n        </StyledContainer>\n    )\n}\n\nexport default Chart\n","import React from 'react';\nimport './App.css';\nimport { UserInput } from './components/UserInput';\nimport { Container } from 'react-bootstrap';\nimport { useState, useEffect } from 'react'\nimport { ResultTable } from './components/ResultTable';\nimport { TryThis } from './components/TryThis';\nimport Chart from './components/Chart'\nfunction App() {\n\n  const [error, setError] = useState({ value: false, message: '' })\n  const [stocksValues, setStocksValues] = useState([])\n\n  const setDay = () => {\n    return new Date().getDay() === 1 ? new Date().getHours() > 10 ? new Date().getDate() : new Date().getDate() - 3\n      : (new Date().getDate() - 1)\n  }\n\n  const yesterday = new Date(new Date().setDate(setDay())).toISOString().slice(0, 10);\n\n  useEffect(() => {\n    console.log(stocksValues)\n  }, [stocksValues])\n\n  const handleUserInput = async (data, callback) => {\n    //setUserData({data})\n    let fetchedData = [];\n    const stocks = data.stocks;\n    const amount = data.amount;\n    stocks.map((stock, idx) => {\n      let oldAmount = amount * (stock.stockPercentage / 100);\n      return fetchedData.push(fetchDataPromise(stock.value, data.date, stock.stockPercentage, oldAmount))\n    })\n    await Promise.all(fetchedData).then(res => setStocksValues(res)).catch(err => {\n      setError({ value: true, message: err })\n    })\n  }\n\n  const fetchDataPromise = async (stockName, date, percentage, oldAmount) => {\n    const promise = new Promise(async (resolve, reject) => {\n      const url = `https://api.worldtradingdata.com/api/v1/history_multi_single_day?symbol=${stockName}&date=${date}&api_token=379GkiBmMK8tAoywHB3TNIzARfIovvVczcczsZDAtJe1IzjCdwnFHdGWQZbP`;\n      let dayValue, yesterdayValue;\n      try {\n        dayValue = await fetch(url)\n          .then(data => data.json())\n          .catch(err => setError({\n            value: true,\n            message: err\n          }))\n\n        yesterdayValue = await fetch(`https://api.worldtradingdata.com/api/v1/history_multi_single_day?symbol=${stockName}&date=${yesterday}&api_token=379GkiBmMK8tAoywHB3TNIzARfIovvVczcczsZDAtJe1IzjCdwnFHdGWQZbP`).then(data => data.json())\n      } catch (err) {\n\n        setError({ value: true, message: err })\n        reject('ERROR', err)\n      }\n      // console.log(yesterdayValue.Message)\n      if (dayValue.Message || yesterdayValue.Message) {\n        setError({\n          value: true,\n          message: dayValue.Message ? dayValue.Message : yesterday.Message\n        });\n        reject('Cannot fetch data')\n      }\n      else {\n        const stockPrice = dayValue.data[stockName]['close'];\n        const todayPrice = yesterdayValue.data[stockName]['open'];\n        const ratio = Math.round((todayPrice / stockPrice) * 100) / 100\n        const newAmount = parseInt(oldAmount * ratio);\n        const res = { stockName: stockName, oldAmount: oldAmount, newAmount: newAmount }\n        resolve(res)\n      }\n    })\n    return promise\n  }\n\n  const Results = () => {\n    return <React.Fragment>\n      <ResultTable stocksValues={stocksValues}></ResultTable>\n      <Chart stocksValues={stocksValues}></Chart>\n    </React.Fragment>\n  }\n\n  return (\n    <React.Fragment>\n      <Container style={{ maxHeight: '100vh' }}>\n        {stocksValues.length > 0 ? <Results /> :\n          <React.Fragment>\n            <UserInput handleUserInput={handleUserInput} stocksValues={stocksValues} value={error.value} message={error.message} ></UserInput>\n            <TryThis></TryThis>\n          </React.Fragment>\n\n        }\n      </Container>\n    </React.Fragment>\n\n  );\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}